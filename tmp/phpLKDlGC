name: PureChat
main: _64FF00\PureChat\PureChat
version: "1.4.0"
api: [1.13.0, 2.0.0]
load: POSTWORLD
author: 64FF00
website: https://github.com/PurePlugins/PureChat
depend: [PurePerms]
softdepend: [FactionsPro, XeviousPE-Factions]
commands:
  setformat:
      description: "Permite definir o formato de gráfico padrão de um grupo PurePerms"
      permission: pchat.command.setformat
  setnametag:
    description: "Permite definir a tag de nome padrão de um grupo PurePerms"
    permission: pchat.command.setnametag
  setprefix:
    description: "Permite-lhe definir o seu prefix Pure Chat"
    permission: pchat.command.setprefix
  setsuffix:
    description: "Permite-lhe definir o sufixo Pure Chat"
    permission: pchat.command.setsuffix	
permissions:
  pchat:
    description: "PureChat by 64FF00! (Twitter: @64FF00)"
    children:
      pchat.command:
        description: "Permite que você use todos os comandos Pure Chat."
        children:
          pchat.command.setformat:
            description: "Permite definir o formato de gráfico padrão de um grupo PurePerms"
          pchat.command.setnametag:
            description: "Permite definir a tag de nome padrão de um grupo PurePerms"
          pchat.command.setprefix:		
            description: "Permite-lhe definir o seu prefix Pure Chat"
          pchat.command.setsuffix:		
            description: "Permite-lhe definir o sufix Pure Chat"			
      pchat.coloredMessages:
        description: "Permite usar cores no bate-papo"		<?php

namespace _64FF00\PureChat;

use _64FF00\PureChat\factions\FactionsInterface;
use _64FF00\PureChat\factions\FactionsProNew;
use _64FF00\PureChat\factions\FactionsProOld;
use _64FF00\PureChat\factions\XeviousPE_Factions;

use _64FF00\PurePerms\PPGroup;

use pocketmine\command\Command;
use pocketmine\command\CommandSender;

use pocketmine\Player;

use pocketmine\plugin\PluginBase;

use pocketmine\utils\Config;
use pocketmine\utils\TextFormat;

class PureChat extends PluginBase
{
    /*
        PureChat by 64FF00 (Twitter: @64FF00)

          888  888    .d8888b.      d8888  8888888888 8888888888 .d8888b.   .d8888b.
          888  888   d88P  Y88b    d8P888  888        888       d88P  Y88b d88P  Y88b
        888888888888 888          d8P 888  888        888       888    888 888    888
          888  888   888d888b.   d8P  888  8888888    8888888   888    888 888    888
          888  888   888P "Y88b d88   888  888        888       888    888 888    888
        888888888888 888    888 8888888888 888        888       888    888 888    888
          888  888   Y88b  d88P       888  888        888       Y88b  d88P Y88b  d88P
          888  888    "Y8888P"        888  888        888        "Y8888P"   "Y8888P"
    */

    const MAIN_PREFIX = "\x5b\x50\x75\x72\x65\x43\x68\x61\x74\x3a\x36\x34\x46\x46\x30\x30\x5d";

    /** @var Config $config */
    private $config;

    /** @var FactionsInterface $factionsAPI */
    private $factionsAPI;

    /** @var \_64FF00\PurePerms\PurePerms $purePerms */
    private $purePerms;

    public function onLoad()
    {
        $this->saveDefaultConfig();

        $this->config = new Config($this->getDataFolder() . "config.yml", Config::YAML);

        if(!$this->config->get("version"))
        {
            $version = $this->getDescription()->getVersion();

            $this->config->set("version", $version);

            $this->fixOldConfig();
        }

        $this->purePerms = $this->getServer()->getPluginManager()->getPlugin("PurePerms");
    }
    
    public function onEnable()
    {
        $this->loadFactionsPlugin();

        $this->getServer()->getPluginManager()->registerEvents(new PCListener($this), $this);
    }

    /**
     * @param CommandSender $sender
     * @param Command $cmd
     * @param string $label
     * @param array $args
     */
    public function onCommand(CommandSender $sender, Command $cmd, $label, array $args)
    {
        switch(strtolower($cmd->getName()))
        {
            case "setformat":

                if(count($args) < 3)
                {
                    $sender->sendMessage(TextFormat::GREEN . self::MAIN_PREFIX . " Use: /setformat <grupo> <Mundo> <formato>");

                    return true;
                }

                $group = $this->purePerms->getGroup($args[0]);

                if($group === null)
                {
                    $sender->sendMessage(TextFormat::RED . self::MAIN_PREFIX . " Grupo " . $args[0] . "não existe.");

                    return true;
                }

                $levelName = null;

                if($args[1] !== "null" and $args[1] !== "global")
                {
                    /** @var \pocketmine\level\Level $level */
                    $level = $this->getServer()->getLevelByName($args[1]);

                    if ($level === null) {
                        $sender->sendMessage(TextFormat::RED . self::MAIN_PREFIX . " Nome do Mundo inválido!");

                        return true;
                    }

                    $levelName = $level->getName();
                }

                $chatFormat = implode(" ", array_slice($args, 2));

                $this->setOriginalChatFormat($group, $chatFormat, $levelName);

                $sender->sendMessage(TextFormat::GREEN . self::MAIN_PREFIX . " Você define o formato do chat em grupo para " . $chatFormat . ".");

                break;

            case "setnametag":

                if(count($args) < 3)
                {
                    $sender->sendMessage(TextFormat::GREEN . self::MAIN_PREFIX . " Use: /setnametag <grupo> <Mundo> <formato>");

                    return true;
                }

                $group = $this->purePerms->getGroup($args[0]);

                if($group === null)
                {
                    $sender->sendMessage(TextFormat::RED . self::MAIN_PREFIX . " Grupo " . $args[0] . "não existe.");

                    return true;
                }

                $levelName = null;

                if($args[1] !== "null" and $args[1] !== "global")
                {
                    /** @var \pocketmine\level\Level $level */
                    $level = $this->getServer()->getLevelByName($args[1]);

                    if ($level === null) {
                        $sender->sendMessage(TextFormat::RED . self::MAIN_PREFIX . " Nome do Mundo inválido!");

                        return true;
                    }

                    $levelName = $level->getName();
                }

                $nameTag = implode(" ", array_slice($args, 2));

                $this->setOriginalNametag($group, $nameTag, $levelName);

                $sender->sendMessage(TextFormat::GREEN . self::MAIN_PREFIX . " Você definiu a tag de nome do grupo como " . $nameTag . ".");

                break;


            case "setprefix":

                if(!$sender instanceof Player)
                {
                    $sender->sendMessage(TextFormat::GREEN . self::MAIN_PREFIX . " Este comando pode ser usado apenas no jogo.");

                    return true;
                }

                if(!isset($args[0]))
                {
                    $sender->sendMessage(TextFormat::GREEN . self::MAIN_PREFIX . " Use: /setprefix <prefix>");

                    return true;
                }

                $levelName = $this->config->get("enable-multiworld-chat") ? $sender->getLevel()->getName() : null;

                $prefix = str_replace("{BLANK}", ' ', implode('', $args));

                $this->setPrefix($prefix, $sender, $levelName);

                $sender->sendMessage(TextFormat::GREEN . self::MAIN_PREFIX . " Você definiu seu prefix como " . $prefix . ".");

                break;

            case "setsuffix":

                if(!$sender instanceof Player)
                {
                    $sender->sendMessage(TextFormat::GREEN . self::MAIN_PREFIX . " Este comando pode ser usado somente no jogo.");

                    return true;
                }

                if(!isset($args[0]))
                {
                    $sender->sendMessage(TextFormat::GREEN . self::MAIN_PREFIX . " Use: /setsuffix <suffix>");

                    return true;
                }

                $levelName = $this->config->get("enable-multiworld-chat") ? $sender->getLevel()->getName() : null;

                $suffix = str_replace("{BLANK}", ' ', implode('', $args));

                $this->setSuffix($suffix, $sender, $levelName);

                $sender->sendMessage(TextFormat::GREEN . self::MAIN_PREFIX . " Você definiu seu suffix como " . $suffix . ".");

                break;
        }

        return true;
    }

    private function fixOldConfig()
    {
        $tempData = $this->config->getAll();

        $version = $this->getDescription()->getVersion();

        $tempData["version"] = $version;

        if(!isset($tempData["default-factions-plugin"]))
            $tempData["default-factions-plugin"] = null;

        if(isset($tempData["enable-multiworld-support"]))
        {
            $tempData["enable-multiworld-chat"] = $tempData["enable-multiworld-support"];

            unset($tempData["enable-multiworld-support"]);
        }

        if(isset($tempData["custom-no-fac-message"]))
            unset($tempData["custom-no-fac-message"]);

        if(isset($tempData["groups"]))
        {
            foreach($tempData["groups"] as $groupName => $tempGroupData)
            {
                if(isset($tempGroupData["default-chat"]))
                {
                    $tempGroupData["chat"] = $this->fixOldData($tempGroupData["default-chat"]);

                    unset($tempGroupData["default-chat"]);
                }

                if(isset($tempGroupData["default-nametag"]))
                {
                    $tempGroupData["nametag"] = $this->fixOldData($tempGroupData["default-nametag"]);

                    unset($tempGroupData["default-nametag"]);
                }

                if(isset($tempGroupData["worlds"]))
                {
                    foreach($tempGroupData["worlds"] as $worldName => $worldData)
                    {
                        if(isset($worldData["default-chat"]))
                        {
                            $worldData["chat"] = $this->fixOldData($worldData["default-chat"]);

                            unset($worldData["default-chat"]);
                        }

                        if(isset($worldData["default-nametag"]))
                        {
                            $worldData["nametag"] = $this->fixOldData($worldData["default-nametag"]);

                            unset($worldData["default-nametag"]);
                        }

                        $tempGroupData["worlds"][$worldName] = $worldData;
                    }
                }

                $tempData["groups"][$groupName] = $tempGroupData;
            }
        }

        $this->config->setAll($tempData);
        $this->config->save();

        $this->config->reload();

        $this->getLogger()->notice("Upgraded PureChat config.yml to the latest version");
    }

    /**
     * @param $string
     * @return mixed
     */
    private function fixOldData($string)
    {
        $string = str_replace("{COLOR_BLACK}", "&0", $string);
        $string = str_replace("{COLOR_DARK_BLUE}", "&1", $string);
        $string = str_replace("{COLOR_DARK_GREEN}", "&2", $string);
        $string = str_replace("{COLOR_DARK_AQUA}", "&3", $string);
        $string = str_replace("{COLOR_DARK_RED}", "&4", $string);
        $string = str_replace("{COLOR_DARK_PURPLE}", "&5", $string);
        $string = str_replace("{COLOR_GOLD}", "&6", $string);
        $string = str_replace("{COLOR_GRAY}", "&7", $string);
        $string = str_replace("{COLOR_DARK_GRAY}", "&8", $string);
        $string = str_replace("{COLOR_BLUE}", "&9", $string);
        $string = str_replace("{COLOR_GREEN}", "&a", $string);
        $string = str_replace("{COLOR_AQUA}", "&b", $string);
        $string = str_replace("{COLOR_RED}", "&c", $string);
        $string = str_replace("{COLOR_LIGHT_PURPLE}", "&d", $string);
        $string = str_replace("{COLOR_YELLOW}", "&e", $string);
        $string = str_replace("{COLOR_WHITE}", "&f", $string);

        $string = str_replace("{FORMAT_OBFUSCATED}", "&k", $string);
        $string = str_replace("{FORMAT_BOLD}", "&l", $string);
        $string = str_replace("{FORMAT_STRIKETHROUGH}", "&m", $string);
        $string = str_replace("{FORMAT_UNDERLINE}", "&n", $string);
        $string = str_replace("{FORMAT_ITALIC}", "&o", $string);
        $string = str_replace("{FORMAT_RESET}", "&r", $string);

        $string = str_replace("{world_name}", "{world}", $string);
        $string = str_replace("{faction}", "{fac_rank}{fac_name}", $string);
        $string = str_replace("{user_name}", "{display_name}", $string);
        $string = str_replace("{message}", "{msg}", $string);

        return $string;
    }

    private function loadFactionsPlugin()
    {
        $factionsPluginName = $this->config->get("default-factions-plugin");

        if($factionsPluginName === null)
        {
            $this->getLogger()->notice("Nenhum plug-in de facções válido no nó do plug-in factions-default foi encontrado. Desativando o suporte a plugins de facções.");
        }
        else
        {
            switch(strtolower($factionsPluginName))
            {
                case "factionspro":

                    $factionsPro = $this->getServer()->getPluginManager()->getPlugin("FactionsPro");

                    if($factionsPro !== null)
                    {
                        if(version_compare($factionsPro->getDescription()->getVersion(), "1.5b1") === -1)
                        {
                            $this->factionsAPI = new FactionsProOld();

                            $this->getLogger()->notice("FactionsPro-OLD suporte ativado.");

                            break;
                        }
                        else
                        {
                            $this->factionsAPI = new FactionsProNew();

                            $this->getLogger()->notice("FactionsPro-NEW suporte ativado.");

                            break;
                        }
                    }

                    $this->getLogger()->notice("Nenhum plug-in de facções válido no nó do plug-in factions-default foi encontrado. Desativando o suporte a plugins de facções.");

                    break;

                case "xeviouspe-factions":

                    if($this->getServer()->getPluginManager()->getPlugin("XeviousPE-Factions") !== null)
                    {
                        $this->factionsAPI = new XeviousPE_Factions();

                        $this->getLogger()->notice("XeviousPE-Factions suporte ativado.");

                        break;
                    }

                    $this->getLogger()->notice("Nenhum plug-in de facções válido no nó do plug-in factions-default foi encontrado. Desativando o suporte a plugins de facções.");

                    break;

                default:

                    $this->getLogger()->notice("Nenhum plug-in de facções válido no nó do plug-in factions-default foi encontrado. Desativando o suporte a plugins de facções.");

                    break;
            }
        }
    }

    /*
          888  888          d8888 8888888b. 8888888
          888  888         d88888 888   Y88b  888
        888888888888      d88P888 888    888  888
          888  888       d88P 888 888   d88P  888
          888  888      d88P  888 8888888P"   888
        888888888888   d88P   888 888         888
          888  888    d8888888888 888         888
          888  888   d88P     888 888       8888888
    */

    /**
     * @param $string
     * @return mixed
     */
    public function applyColors($string)
    {
        $string = str_replace("&0", TextFormat::BLACK, $string);
        $string = str_replace("&1", TextFormat::DARK_BLUE, $string);
        $string = str_replace("&2", TextFormat::DARK_GREEN, $string);
        $string = str_replace("&3", TextFormat::DARK_AQUA, $string);
        $string = str_replace("&4", TextFormat::DARK_RED, $string);
        $string = str_replace("&5", TextFormat::DARK_PURPLE, $string);
        $string = str_replace("&6", TextFormat::GOLD, $string);
        $string = str_replace("&7", TextFormat::GRAY, $string);
        $string = str_replace("&8", TextFormat::DARK_GRAY, $string);
        $string = str_replace("&9", TextFormat::BLUE, $string);
        $string = str_replace("&a", TextFormat::GREEN, $string);
        $string = str_replace("&b", TextFormat::AQUA, $string);
        $string = str_replace("&c", TextFormat::RED, $string);
        $string = str_replace("&d", TextFormat::LIGHT_PURPLE, $string);
        $string = str_replace("&e", TextFormat::YELLOW, $string);
        $string = str_replace("&f", TextFormat::WHITE, $string);
        $string = str_replace("&k", TextFormat::OBFUSCATED, $string);
        $string = str_replace("&l", TextFormat::BOLD, $string);
        $string = str_replace("&m", TextFormat::STRIKETHROUGH, $string);
        $string = str_replace("&n", TextFormat::UNDERLINE, $string);
        $string = str_replace("&o", TextFormat::ITALIC, $string);
        $string = str_replace("&r", TextFormat::RESET, $string);

        return $string;
    }

    /**
     * @param $string
     * @param Player $player
     * @param $message
     * @param null $levelName
     * @return mixed

     */
    public function applyPCTags($string, Player $player, $message, $levelName)
    {
        // TODO
        $string = str_replace("{display_name}", $player->getDisplayName(), $string);

        if($message === null)
            $message = "";

        if($player->hasPermission("pchat.coloredMessages"))
        {
            $string = str_replace("{msg}", $this->applyColors($message), $string);
        }
        else
        {
            $string = str_replace("{msg}", $this->stripColors($message), $string);
        }

        if($this->factionsAPI !== null)
        {
            $string = str_replace("{fac_name}", $this->factionsAPI->getPlayerFaction($player), $string);
            $string = str_replace("{fac_rank}", $this->factionsAPI->getPlayerRank($player), $string);
        }
        else
        {
            $string = str_replace("{fac_name}", '', $string);
            $string = str_replace("{fac_rank}", '', $string);
        }

        $string = str_replace("{world}", ($levelName === null ? "" : $levelName), $string);

        $string = str_replace("{prefix}", $this->getPrefix($player, $levelName), $string);
        $string = str_replace("{suffix}", $this->getSuffix($player, $levelName), $string);

        return $string;
    }

    /**
     * @param Player $player
     * @param $message
     * @param null $levelName
     * @return mixed
     */
    public function getChatFormat(Player $player, $message, $levelName = null)
    {
        $originalChatFormat = $this->getOriginalChatFormat($player, $levelName);

        $chatFormat = $this->applyColors($originalChatFormat);
        $chatFormat = $this->applyPCTags($chatFormat, $player, $message, $levelName);

        return $chatFormat;
    }

    /**
     * @param Player $player
     * @param null $levelName
     * @return mixed
     */
    public function getNametag(Player $player, $levelName = null)
    {
        $originalNametag = $this->getOriginalNametag($player, $levelName);

        $nameTag = $this->applyColors($originalNametag);
        $nameTag = $this->applyPCTags($nameTag, $player, null, $levelName);

        return $nameTag;
    }

    /**
     * @param Player $player
     * @param null $levelName
     * @return mixed
     */
    public function getOriginalChatFormat(Player $player, $levelName = null)
    {
        /** @var \_64FF00\PurePerms\PPGroup $group */
        $group = $this->purePerms->getUserDataMgr()->getGroup($player, $levelName);

        if($levelName === null)
        {
            if($this->config->getNested("groups." . $group->getName() . ".chat") === null)
            {
                $this->getLogger()->critical("Formato de bate-papo inválido encontrado no config.yml (Group: " . $group->getName() . ") / Configurando o valor padrão.");

                $this->config->setNested("groups." . $group->getName() . ".chat", "&8&l[" . $group->getName() . "]&f&r {display_name} &7> {msg}");

                $this->config->save();
                $this->config->reload();
            }

            return $this->config->getNested("groups." . $group->getName() . ".chat");
        }
        else
        {
            if($this->config->getNested("groups." . $group->getName() . "worlds.$levelName.chat") === null)
            {
                $this->getLogger()->critical("Formato de bate-papo inválido encontrado no config.yml (Group: " . $group->getName() . ", WorldName = $levelName) / Configurando o valor padrão.");

                $this->config->setNested("groups." . $group->getName() . "worlds.$levelName.chat", "&8&l[" . $group->getName() . "]&f&r {display_name} &7> {msg}");

                $this->config->save();
                $this->config->reload();
            }

            return $this->config->getNested("groups." . $group->getName() . "worlds.$levelName.chat");
        }
    }

    public function getOriginalNametag(Player $player, $levelName = null)
    {
        /** @var \_64FF00\PurePerms\PPGroup $group */
        $group = $this->purePerms->getUserDataMgr()->getGroup($player, $levelName);

        if($levelName === null)
        {
            if($this->config->getNested("groups." . $group->getName() . ".nametag") === null)
            {
                $this->getLogger()->critical("Marca de nome inválida encontrada no config.yml (Group: " . $group->getName() . ") / Configurando o valor padrão.");

                $this->config->setNested("groups." . $group->getName() . ".nametag", "&8&l[" . $group->getName() . "]&f&r {display_name}");

                $this->config->save();
                $this->config->reload();
            }

            return $this->config->getNested("groups." . $group->getName() . ".nametag");
        }
        else
        {
            if($this->config->getNested("groups." . $group->getName() . "worlds.$levelName.nametag") === null)
            {
                $this->getLogger()->critical("Marca de nome inválida encontrada no config.yml (Group: " . $group->getName() . ", WorldName = $levelName) / Configurando o valor padrão.");

                $this->config->setNested("groups." . $group->getName() . "worlds.$levelName.nametag", "&8&l[" . $group->getName() . "]&f&r {display_name}");

                $this->config->save();
                $this->config->reload();
            }

            return $this->config->getNested("groups." . $group->getName() . "worlds.$levelName.nametag");
        }
    }

    /**
     * @param Player $player
     * @param null $levelName
     * @return mixed|null|string
     */
    public function getPrefix(Player $player, $levelName = null)
    {
        if($levelName === null)
        {
            return $this->purePerms->getUserDataMgr()->getNode($player, "prefix");
        }
        else
        {
            $worldData = $this->purePerms->getUserDataMgr()->getWorldData($player, $levelName);

            if(!isset($worldData["prefix"]) || $worldData["prefix"] === null)
                return "";

            return $worldData["prefix"];
        }
    }

    /**
     * @param Player $player
     * @param null $levelName
     * @return mixed|null|string
     */
    public function getSuffix(Player $player, $levelName = null)
    {
        if($levelName === null)
        {
            return $this->purePerms->getUserDataMgr()->getNode($player, "suffix");
        }
        else
        {
            $worldData = $this->purePerms->getUserDataMgr()->getWorldData($player, $levelName);

            if(!isset($worldData["suffix"]) || $worldData["suffix"] === null)
                return "";

            return $worldData["suffix"];
        }
    }

    /**
     * @param PPGroup $group
     * @param $chatFormat
     * @param null $levelName
     * @return bool
     */
    public function setOriginalChatFormat(PPGroup $group, $chatFormat, $levelName = null)
    {
        if($levelName === null)
        {
            $this->config->setNested("groups." . $group->getName() . ".chat", $chatFormat);
        }
        else
        {
            $this->config->setNested("groups." . $group->getName() . "worlds.$levelName.chat", $chatFormat);
        }

        $this->config->save();

        $this->config->reload();

        return true;
    }

    /**
     * @param PPGroup $group
     * @param $nameTag
     * @param null $levelName
     * @return bool
     */
    public function setOriginalNametag(PPGroup $group, $nameTag, $levelName = null)
    {
        if($levelName === null)
        {
            $this->config->setNested("groups." . $group->getName() . ".nametag", $nameTag);
        }
        else
        {
            $this->config->setNested("groups." . $group->getName() . "worlds.$levelName.nametag", $nameTag);
        }

        $this->config->save();

        $this->config->reload();

        return true;
    }

    /**
     * @param $prefix
     * @param Player $player
     * @param null $levelName
     * @return bool
     */
    public function setPrefix($prefix, Player $player, $levelName = null)
    {
        if($levelName === null)
        {
            $this->purePerms->getUserDataMgr()->setNode($player, "prefix", $prefix);
        }
        else
        {
            $worldData = $this->purePerms->getUserDataMgr()->getWorldData($player, $levelName);

            $worldData["prefix"] = $prefix;

            $this->purePerms->getUserDataMgr()->setWorldData($player, $levelName, $worldData);
        }

        return true;
    }

    /**
     * @param $suffix
     * @param Player $player
     * @param null $levelName
     * @return bool
     */
    public function setSuffix($suffix, Player $player, $levelName = null)
    {
        if($levelName === null)
        {
            $this->purePerms->getUserDataMgr()->setNode($player, "suffix", $suffix);
        }
        else
        {
            $worldData = $this->purePerms->getUserDataMgr()->getWorldData($player, $levelName);

            $worldData["suffix"] = $suffix;

            $this->purePerms->getUserDataMgr()->setWorldData($player, $levelName, $worldData);
        }

        return true;
    }

    /**
     * @param $string
     * @return mixed
     */
    public function stripColors($string)
    {
        $string = str_replace(TextFormat::BLACK, '', $string);
        $string = str_replace(TextFormat::DARK_BLUE, '', $string);
        $string = str_replace(TextFormat::DARK_GREEN, '', $string);
        $string = str_replace(TextFormat::DARK_AQUA, '', $string);
        $string = str_replace(TextFormat::DARK_RED, '', $string);
        $string = str_replace(TextFormat::DARK_PURPLE, '', $string);
        $string = str_replace(TextFormat::GOLD, '', $string);
        $string = str_replace(TextFormat::GRAY, '', $string);
        $string = str_replace(TextFormat::DARK_GRAY, '', $string);
        $string = str_replace(TextFormat::BLUE, '', $string);
        $string = str_replace(TextFormat::GREEN, '', $string);
        $string = str_replace(TextFormat::AQUA, '', $string);
        $string = str_replace(TextFormat::RED, '', $string);
        $string = str_replace(TextFormat::LIGHT_PURPLE, '', $string);
        $string = str_replace(TextFormat::YELLOW, '', $string);
        $string = str_replace(TextFormat::WHITE, '', $string);
        $string = str_replace(TextFormat::OBFUSCATED, '', $string);
        $string = str_replace(TextFormat::BOLD, '', $string);
        $string = str_replace(TextFormat::STRIKETHROUGH, '', $string);
        $string = str_replace(TextFormat::UNDERLINE, '', $string);
        $string = str_replace(TextFormat::ITALIC, '', $string);
        $string = str_replace(TextFormat::RESET, '', $string);

        return $string;
    }
}
<?php

namespace _64FF00\PureChat\factions;

use pocketmine\Player;
use pocketmine\Server;

class FactionsProOld implements FactionsInterface
{
    /*
        PureChat by 64FF00 (Twitter: @64FF00)

          888  888    .d8888b.      d8888  8888888888 8888888888 .d8888b.   .d8888b.
          888  888   d88P  Y88b    d8P888  888        888       d88P  Y88b d88P  Y88b
        888888888888 888          d8P 888  888        888       888    888 888    888
          888  888   888d888b.   d8P  888  8888888    8888888   888    888 888    888
          888  888   888P "Y88b d88   888  888        888       888    888 888    888
        888888888888 888    888 8888888888 888        888       888    888 888    888
          888  888   Y88b  d88P       888  888        888       Y88b  d88P Y88b  d88P
          888  888    "Y8888P"        888  888        888        "Y8888P"   "Y8888P"
    */

    /**
     * @return null|\pocketmine\plugin\Plugin
     */
    public function getAPI()
    {
        return Server::getInstance()->getPluginManager()->getPlugin("FactionsPro");
    }

    /**
     * @param Player $player
     * @return string
     */
    public function getPlayerFaction(Player $player)
    {
        return $this->getAPI()->getPlayerFaction($player->getName());
    }

    /**
     * @param Player $player
     * @return string
     */
    public function getPlayerRank(Player $player)
    {
        if($this->getAPI()->isInFaction($player->getName()))
        {
            if($this->getAPI()->isOfficer($player->getName())) {
                return '*';
            }
            elseif($this->getAPI()->isLeader($player->getName()))
            {
                return '**';
            }
            else
            {
                return '';
            }
        }

        // TODO
        return '';
    }
}
<?php

namespace _64FF00\PureChat\factions;

use pocketmine\Player;

interface FactionsInterface
{
    /*
        PureChat by 64FF00 (Twitter: @64FF00)

          888  888    .d8888b.      d8888  8888888888 8888888888 .d8888b.   .d8888b.
          888  888   d88P  Y88b    d8P888  888        888       d88P  Y88b d88P  Y88b
        888888888888 888          d8P 888  888        888       888    888 888    888
          888  888   888d888b.   d8P  888  8888888    8888888   888    888 888    888
          888  888   888P "Y88b d88   888  888        888       888    888 888    888
        888888888888 888    888 8888888888 888        888       888    888 888    888
          888  888   Y88b  d88P       888  888        888       Y88b  d88P Y88b  d88P
          888  888    "Y8888P"        888  888        888        "Y8888P"   "Y8888P"
    */

    public function getAPI();

    public function getPlayerFaction(Player $player);

    public function getPlayerRank(Player $player);
}
<?php

namespace _64FF00\PureChat;

use _64FF00\PurePerms\event\PPGroupChangedEvent;

use pocketmine\event\Listener;
use pocketmine\event\player\PlayerChatEvent;
use pocketmine\event\player\PlayerJoinEvent;

use pocketmine\Player;

class PCListener implements Listener
{
    /*
        PureChat by 64FF00 (Twitter: @64FF00)

          888  888    .d8888b.      d8888  8888888888 8888888888 .d8888b.   .d8888b.
          888  888   d88P  Y88b    d8P888  888        888       d88P  Y88b d88P  Y88b
        888888888888 888          d8P 888  888        888       888    888 888    888
          888  888   888d888b.   d8P  888  8888888    8888888   888    888 888    888
          888  888   888P "Y88b d88   888  888        888       888    888 888    888
        888888888888 888    888 8888888888 888        888       888    888 888    888
          888  888   Y88b  d88P       888  888        888       Y88b  d88P Y88b  d88P
          888  888    "Y8888P"        888  888        888        "Y8888P"   "Y8888P"
    */

    private $plugin;

    /**
 * @param PureChat $plugin
 */
    public function __construct(PureChat $plugin)
    {
        $this->plugin = $plugin;
    }

    public function onGroupChanged(PPGroupChangedEvent $event)
    {
        /** @var \pocketmine\IPlayer $player */
        $player = $event->getPlayer();
		
		if($player instanceof Player)
		{
			$levelName = $this->plugin->getConfig()->get("enable-multiworld-chat") ? $player->getLevel()->getName() : null;

			$nameTag = $this->plugin->getNametag($player, $levelName);

			$player->setNameTag($nameTag);
		}
    }

    /**
     * @param PlayerJoinEvent $event
     * @priority HIGH
     */
    public function onPlayerJoin(PlayerJoinEvent $event)
    {
        /** @var \pocketmine\Player $player */
        $player = $event->getPlayer();
        $levelName = $this->plugin->getConfig()->get("enable-multiworld-chat") ? $player->getLevel()->getName() : null;

        $nameTag = $this->plugin->getNametag($player, $levelName);

        $player->setNameTag($nameTag);
    }

    /**
     * @param PlayerChatEvent $event
     * @priority HIGH
     */
    public function onPlayerChat(PlayerChatEvent $event)
    {
        $player = $event->getPlayer();
        $message = $event->getMessage();

        $levelName = $this->plugin->getConfig()->get("enable-multiworld-chat") ? $player->getLevel()->getName() : null;

        $chatFormat = $this->plugin->getChatFormat($player, $message, $levelName);

        $event->setFormat($chatFormat);
    }
}

# PureChat by 64FF00 (xktiverz@gmail.com, @64ff00 for Twitter)

---

# PureChat version string
# - string
version: "1.4.0-BETA-04"

# Set default factions plugin for PureChat
# - FactionsPro / XeviousPE-Factions (§l§9-§8]§b>§7[§cXevious§aTestSrv§7]§b<§8[§9-) / null
default-factions-plugin: FactionsPro

# Enable this if you want to use per-world chat formats / per-world nametags for players
# - true / false
enable-multiworld-chat: false

# Please check if you have all PurePerms groups in your server here

# &0: Black, &1: Dark Blue, &2: Dark Green, &3: Dark Aqua, &4: Dark Red, &5: Dark Purple, &6: Gold, &7: Gray, &8: Dark Gray, &9: Blue
# &a: Green, &b: Aqua, &c: Red, &d: Light Purple, &e: Yellow, &f: White
# &k: Obfuscated, &l: Bold, &m: Strikethrough, &n: Underline, &o: Italic, &r: Reset

# Available PureChat tags: {display_name}, {msg}, {fac_name}, {fac_rank}, {prefix}, {suffix}, {world}
groups:
  P:
    chat: "&8(§6{fac_rank}{fac_name}&8) [§fMembro§8]§7 {display_name} §f»§7 {msg}"
    nametag: "&8(§6{fac_rank}{fac_name}&8) [§fMembro§8]§7 {display_name}"
    worlds: []
  A: 
    chat: "§8[§4Admin§8]§f {display_name} §c»§f {msg}"
    nametag: "§8[§4Admin§8]§f {display_name}"
    worlds: []
  D: 
    chat: "§8[§o§fDono§r§8] §f{display_name} §c»§f {msg}"
    nametag: "§8[§f§oDono§r§8]§f {display_name}"
    worlds: []
  "Y": 
    chat: "&8(§6{fac_rank}{fac_name}&8) §8[§fYou§cTuber§8]§7 {display_name} §f»§7 {msg}"
    nametag: "&8(§6{fac_rank}{fac_name}&8) §8[§fYou§cTuber§8] §7{display_name}"
    worlds: []
  L: 
    chat: "&8(§6{fac_rank}{fac_name}&8) [§aLendário§8]§7 {display_name} §e»§7{msg}"
    nametag: "&8(§6{fac_rank}{fac_name}&8) [§aLendário§8]§7 {display_name}"
    worlds: []
  S: 
    chat: "&8(§6{fac_rank}{fac_name}&8) [§cSupremo§8]§7 {display_name} §e»§7 {msg}"
    nametag: "&8(§6{fac_rank}{fac_name}&8) [§cSupremo§8]§7 {display_name}"
    worlds: []
  V: 
    chat: "&8(§6{fac_rank}{fac_name}&8) [§4Veterano§8]§7 {display_name} §e»§7 {msg}"
    nametag: "&8(§6{fac_rank}{fac_name}&8) [§4Veterano§8]§7 {display_name}"
    worlds: []
  M: 
    chat: "&8(§6{fac_rank}{fac_name}&8) [§2Magnata§8]§7 {display_name} §e»§7 {msg}"
    nametag: "&8(§6{fac_rank}{fac_name}&8) [§2Magnata§8]§7 {display_name}"
    worlds: []
  C: 
    chat: "§8[§dConstrutor§8]§f {display_name} §c»§f {msg}"
    nametag: "§8[§dConstrutor§8]§f {display_name}"
    worlds: []
...